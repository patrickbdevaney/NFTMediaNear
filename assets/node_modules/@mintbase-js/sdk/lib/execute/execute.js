"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const config_1 = require("../config/config");
const execute_utils_1 = require("./execute.utils");
/**
 * Base method for executing contract calls.
 * @param signing object containing either near wallet selector
 * @param calls  {@link NearContractCall[]} any number of single calls or array of calls
 *  wallet: {@link Wallet} or account: {@link Account}, defaults to wallet when present
 * @returns an outcome object or an array of outcome objects if batching calls {@link FinalExecutionOutcome[]} | {@link FinalExecutionOutcome}, or a redirect to selected callbackUrl
 */
const execute = ({ wallet, account, callbackUrl = config_1.mbjs.keys.callbackUrl, callbackArgs }, ...calls) => __awaiter(void 0, void 0, void 0, function* () {
    (0, execute_utils_1.validateSigningOptions)({ wallet, account });
    const outcomes = yield (0, execute_utils_1.genericBatchExecute)((0, execute_utils_1.flattenArgs)(calls), wallet, account, callbackUrl, callbackArgs);
    return (0, execute_utils_1.checkCallbackUrl)(callbackUrl, callbackArgs, wallet, outcomes);
});
exports.execute = execute;
//# sourceMappingURL=execute.js.map