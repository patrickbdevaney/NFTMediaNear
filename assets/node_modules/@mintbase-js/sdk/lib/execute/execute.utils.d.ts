import type { Wallet, FinalExecutionOutcome } from '@near-wallet-selector/core';
import { BrowserWalletSignAndSendTransactionParams } from '@near-wallet-selector/core/lib/wallet';
import type { providers, Account } from 'near-api-js';
import { CallBackArgs, ContractCall, TxnOptionalSignerId, NearExecuteOptions, ExecuteArgsResponse, ComposableCall } from '../types';
/**
 * checkCallbackUrl()
 * method to check if its a regular browser wallet or a InjectedWallet, and make them have the same behavior (redirect) to the desired url.
 * @param callbackUrl url that should redirect after transaction
 * @param callbackArgs metadata that should be passed via url to the success page
 * @returns an outcome object or an array of outcome objects if batching calls {@link FinalExecutionOutcome[]} | {@link FinalExecutionOutcome}, or a redirect to selected callbackUrl
 */
export declare const checkCallbackUrl: (callbackUrl: string, callbackArgs: CallBackArgs, wallet: Wallet, outcomes: void | FinalExecutionOutcome[]) => void | FinalExecutionOutcome[] | FinalExecutionOutcome;
export declare const callbackUrlFormatter: (callbackUrl: string, callbackArgs: CallBackArgs) => string;
export declare const genericBatchExecute: (call: ContractCall<ExecuteArgsResponse>[], wallet: Wallet, account: Account, callbackUrl: string, callbackArgs: CallBackArgs) => Promise<void | providers.FinalExecutionOutcome[]>;
export declare const convertGenericCallToWalletCall: (call: ContractCall<ExecuteArgsResponse>) => BrowserWalletSignAndSendTransactionParams | TxnOptionalSignerId;
export declare function flattenArgs(calls: ComposableCall[]): ContractCall<ExecuteArgsResponse>[];
export declare const validateSigningOptions: ({ wallet, account }: NearExecuteOptions) => void;
//# sourceMappingURL=execute.utils.d.ts.map