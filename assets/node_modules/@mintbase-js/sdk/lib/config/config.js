"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.mbjs = exports.setGlobalEnv = exports.DEFAULT_API_KEY = exports.hasCallbackUrl = exports.hasContractAddress = exports.isDebugMode = exports.isProcessEnv = void 0;
/**
 * mbjs Namespace to set the config vars on all mintbase-js packages, as also retrieve the global keys in any part of the application.
 */
const types_1 = require("../types");
// to create a new key you have to specify here on the configuration and MbJsKeysObject + add on the setGlobalEnv
exports.isProcessEnv = Boolean(typeof window == 'undefined' && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.NEAR_NETWORK));
exports.isDebugMode = Boolean(typeof window == 'undefined' && ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.NEAR_NETWORK) === types_1.NEAR_NETWORKS.TESTNET);
exports.hasContractAddress = Boolean(typeof window == 'undefined' && ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c.CONTRACT_ADDRESS));
exports.hasCallbackUrl = Boolean(typeof window == 'undefined' && ((_d = process === null || process === void 0 ? void 0 : process.env) === null || _d === void 0 ? void 0 : _d.CALLBACK_URL));
exports.DEFAULT_API_KEY = 'anon';
const defaultContractAddress = exports.isProcessEnv ? types_1.MINTBASE_CONTRACTS[process.env.NEAR_NETWORK] : types_1.MINTBASE_CONTRACTS[types_1.NEAR_NETWORKS.TESTNET];
// set startup defaults
// if users set vars on process.env it will come by default setting up the config on the server.
const startupConfig = {
    network: exports.isProcessEnv ? process.env.NEAR_NETWORK : types_1.NEAR_NETWORKS.MAINNET,
    graphqlUrl: exports.isProcessEnv ? types_1.GRAPHQL_ENDPOINTS[process.env.NEAR_NETWORK] : types_1.GRAPHQL_ENDPOINTS[types_1.NEAR_NETWORKS.TESTNET],
    nearRpcUrl: exports.isProcessEnv ? types_1.RPC_ENDPOINTS[process.env.NEAR_NETWORK] : types_1.RPC_ENDPOINTS[types_1.NEAR_NETWORKS.TESTNET],
    callbackUrl: exports.hasCallbackUrl ? process.env.CALLBACK_URL : '',
    // will check for process.env.CONTRACT_ADDRESS if not will setup mintbase contract according to the network, if not will setup testnet contract
    contractAddress: exports.hasContractAddress ? process.env.CONTRACT_ADDRESS : defaultContractAddress,
    marketAddress: exports.isProcessEnv ? types_1.MARKET_CONTRACT_ADDRESS[process.env.NEAR_NETWORK] : types_1.MARKET_CONTRACT_ADDRESS[types_1.NEAR_NETWORKS.TESTNET],
    mbContract: exports.isProcessEnv ? types_1.MINTBASE_CONTRACTS[process.env.NEAR_NETWORK] : types_1.MINTBASE_CONTRACTS[types_1.NEAR_NETWORKS.TESTNET],
    apiKey: exports.isProcessEnv ? process.env.MINTBASE_API_KEY : exports.DEFAULT_API_KEY,
    debugMode: exports.isDebugMode ? true : false,
    isSet: exports.isProcessEnv ? true : false,
};
// config is scoped globally as to avoid version mismatches from conflicting
// (force singleton at scope vs. module resolution)
const config = startupConfig;
globalThis.mbjs = startupConfig;
const setGlobalEnv = (configObj) => {
    var _a, _b;
    const globalConfig = {
        network: configObj.network,
        graphqlUrl: types_1.GRAPHQL_ENDPOINTS[configObj.network],
        nearRpcUrl: types_1.RPC_ENDPOINTS[configObj.network],
        callbackUrl: configObj.callbackUrl,
        contractAddress: (_a = configObj.contractAddress) !== null && _a !== void 0 ? _a : types_1.MINTBASE_CONTRACTS[configObj.network],
        marketAddress: types_1.MARKET_CONTRACT_ADDRESS[configObj.network],
        debugMode: configObj.network == types_1.NEAR_NETWORKS.TESTNET,
        mbContract: types_1.MINTBASE_CONTRACTS[configObj.network],
        apiKey: (_b = configObj.apiKey) !== null && _b !== void 0 ? _b : exports.DEFAULT_API_KEY,
        isSet: true,
    };
    config.network = globalConfig.network;
    config.graphqlUrl = globalConfig.graphqlUrl;
    config.callbackUrl = globalConfig.callbackUrl;
    config.contractAddress = globalConfig.contractAddress;
    config.marketAddress = globalConfig.marketAddress;
    config.mbContract = globalConfig.mbContract;
    config.debugMode = globalConfig.debugMode;
    config.nearRpcUrl = globalConfig.nearRpcUrl;
    config.apiKey = globalConfig.apiKey;
    config.isSet = globalConfig.isSet;
    return globalConfig;
};
exports.setGlobalEnv = setGlobalEnv;
// client-side / manual set method
const setConfig = (configObj = config) => {
    return (0, exports.setGlobalEnv)(configObj);
};
exports.mbjs = {
    config: setConfig,
    keys: config,
};
//# sourceMappingURL=config.js.map