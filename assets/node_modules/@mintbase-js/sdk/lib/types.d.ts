import { Wallet } from '@near-wallet-selector/core';
import BN from 'bn.js';
import { Account } from 'near-api-js';
import type { Optional, Transaction } from '@near-wallet-selector/core';
import type { FinalExecutionOutcome as FEO } from '@near-wallet-selector/core';
export declare enum TOKEN_METHOD_NAMES {
    TRANSFER = "nft_transfer",
    BATCH_TRANSFER = "nft_batch_transfer",
    BATCH_BURN = "nft_batch_burn",
    DEPLOY_TOKEN_CONTRACT = "create_store",
    TRANSFER_TOKEN_CONTRACT_OWNERSHIP = "transfer_store_ownership",
    MINT = "nft_batch_mint",
    ADD_MINTER = "grant_minter",
    REMOVE_MINTER = "revoke_minter",
    BATCH_CHANGE_MINTERS = "batch_change_minters",
    TOKEN_ACCOUNT_REVOKE = "nft_revoke",
    TOKEN_ACCOUNT_REVOKE_ALL = "nft_revoke_all"
}
export declare enum MARKET_METHOD_NAMES {
    LIST = "nft_approve",
    DEPOSIT_STORAGE = "deposit_storage",
    BUY = "buy",
    UNLIST_OLD_MARKET = "delist",
    UNLIST = "unlist"
}
export declare type NEAR_NETWORK = 'testnet' | 'mainnet' | 'sandbox';
export declare type Network = 'testnet' | 'mainnet';
export declare enum NEAR_NETWORKS {
    MAINNET = "mainnet",
    TESTNET = "testnet"
}
export declare enum MARKET_CONTRACT_ADDRESS {
    mainnet = "simple.market.mintbase1.near",
    testnet = "market-v2-beta.mintspace2.testnet"
}
export declare enum MINTBASE_CONTRACTS {
    testnet = "mintspace2.testnet",
    mainnet = "mintbase1.near"
}
export declare enum GRAPHQL_ENDPOINTS {
    mainnet = "https://interop-mainnet.hasura.app/v1/graphql",
    testnet = "https://interop-testnet.hasura.app/v1/graphql"
}
export declare enum RPC_ENDPOINTS {
    mainnet = "https://rpc.mainnet.near.org",
    testnet = "https://rpc.testnet.near.org"
}
export declare type ConfigOptions = {
    network?: Network | string;
    contractAddress?: string;
    callbackUrl?: string;
    apiKey?: string;
};
export interface ConfigOptionsObj extends ConfigOptions {
    graphqlUrl?: GRAPHQL_ENDPOINTS | '';
    marketAddress?: MARKET_CONTRACT_ADDRESS | '';
    mbContract?: MINTBASE_CONTRACTS;
    nearRpcUrl: RPC_ENDPOINTS | '';
    debugMode?: boolean;
    apiKey?: string;
}
export interface MbJsKeysObject extends ConfigOptionsObj {
    isSet: boolean;
}
export declare enum TransactionSuccessEnum {
    MINT = "mint",
    TRANSFER = "transfer",
    BURN = "burn",
    DEPLOY_STORE = "deploy-store",
    MAKE_OFFER = "make-offer",
    REVOKE_MINTER = "revoke-minter",
    ADD_MINTER = "add-minter",
    TRANSFER_STORE_OWNERSHIP = "transfer-store-ownership",
    AUCTION_LIST = "list",
    SIMPLE_SALE_LIST = "simple-sale-list",
    UNLIST = "unlist",
    TAKE_OFFER = "take-offer",
    WITHDRAW_OFFER = "withdraw-offer"
}
export declare type CallBackArgs = {
    args: object;
    type: TransactionSuccessEnum;
};
export declare type ContractCall<T> = {
    contractAddress: string;
    methodName: string;
    args: T;
    gas: string | BN;
    deposit: string | BN;
    signerId?: string;
    callbackUrl?: string;
    meta?: CallBackArgs;
};
export declare type NearContractCall<T> = ContractCall<T> | ContractCall<T>[];
export declare type ComposableCall = NearContractCall<ExecuteArgsResponse> | NearContractCall<ExecuteArgsResponse>[];
export declare type NearExecuteOptions = {
    wallet?: Wallet;
    account?: Account;
    callbackUrl?: string;
    callbackArgs?: CallBackArgs;
};
export declare type BurnArgs = {
    contractAddress?: string;
    tokenIds: string[];
};
export declare type AddMinterArgs = {
    minterId: string;
    contractAddress?: string;
};
export declare type BuyArgs = {
    price: string;
    contractAddress?: string;
    tokenId: string;
    referrerId?: string;
    marketId?: string;
    affiliateAccount?: string;
};
export declare type DelistArgs = {
    contractAddress: string;
    tokenIds: string[];
    marketAddress?: string;
    oldMarket?: boolean;
};
export declare type DeployContractArgs = {
    factoryContractId?: string;
    name: string;
    ownerId: string;
    metadata: {
        symbol: string;
        icon?: string;
        baseUri?: string;
        reference?: string;
        referenceHash?: string;
    };
};
export declare type DepositStorageArgs = {
    listAmount?: number;
    marketAddress?: string;
};
export declare type ListArgs = {
    contractAddress?: string;
    marketAddress?: string;
    price: string;
    tokenId: string;
};
export declare type MintArgs = {
    contractAddress?: string;
    ownerId: string;
    metadata: TokenMetadata;
    royalties?: Splits;
    amount?: number;
    noMedia?: boolean;
    noReference?: boolean;
    tokenIdsToMint?: number[];
};
export declare type TokenMetadata = {
    title?: string;
    description?: string;
    media?: string;
    media_hash?: string;
    copies?: number;
    issued_at?: string;
    expires_at?: string;
    starts_at?: string;
    updated_at?: string;
    extra?: string;
    reference?: string;
    reference_hash?: string;
};
export declare type Splits = Record<string, number>;
export declare type RemoveMinterArgs = {
    minterId: string;
    contractAddress?: string;
};
export declare type TransferArgs = {
    transfers: {
        receiverId: string;
        tokenId: string;
    }[];
    token_ids?: {
        receiverId: string;
        tokenId: string;
    }[];
    contractAddress?: string;
};
export declare type TransferContractOwnershipArgs = {
    contractAddress: string;
    nextOwner: string;
    options?: {
        keepMinters: boolean;
    };
};
export interface OldTransferContractOwnershipArgs {
    new_owner: string;
    keep_old_minters?: boolean;
}
export declare type TxnOptionalSignerId = Optional<Transaction, 'signerId'>;
export interface MinterArgsResponse {
    account_id: string;
}
export interface BatchChangeMinterArgsResponse {
    grant: string[] | undefined;
    revoke: string[] | undefined;
}
export interface BurnArgsResponse {
    token_ids: string[] | string[][];
}
export interface BuyArgsResponse {
    nft_contract_id: string;
    token_id: string;
    referrer_id: string;
}
export interface DelistArgsResponse {
    token_id: string;
    account_id: string;
    nft_contract_id: string;
}
export interface DelistMultipleArgsResponse extends DelistArgsResponse {
    token_ids: string[] | string[][];
    nft_contract_id: string;
}
export interface DeployContractArgsResponse {
    owner_id: string;
    metadata: {
        spec: string;
        name: string;
        symbol: string;
        icon: string;
        base_uri: string;
        reference: string;
        reference_hash: string;
    };
}
export interface TransferArgsResponse {
    receiver_id: string;
    token_id: string;
}
export interface ListArgsResponse {
    token_id: string;
    account_id: string;
    msg: string;
}
export interface MintArgsResponse {
    owner_id: string;
    metadata: TokenMetadata;
    num_to_mint: number;
    royalty_args: {
        split_between: Splits;
        percentage: number;
    } | null;
    token_ids_to_mint?: number[];
}
export interface TransferContractOwnershipArgsResponse {
    new_owner: string;
    keep_old_minters: boolean;
}
export interface ExecuteExtraArgsResponse {
    token_key?: string[] | string;
    autotransfer?: boolean;
    metadataId?: string;
    price?: string | string[];
    timeout?: {
        Hours: number;
    }[];
    contractId?: string;
}
export declare type ExecuteArgsResponse = BatchChangeMinterArgsResponse | TransferArgsResponse | ListArgsResponse | MintArgsResponse | MinterArgsResponse | DeployContractArgsResponse | DelistMultipleArgsResponse | BuyArgsResponse | BurnArgsResponse | TransferContractOwnershipArgsResponse | ExecuteExtraArgsResponse | Record<string, unknown>;
export declare type FinalExecutionOutcome = FEO;
//# sourceMappingURL=types.d.ts.map